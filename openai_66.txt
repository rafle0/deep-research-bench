Obsidian Plugins for Notion-like Multi-View Databases
Notion’s databases can be viewed as tables, kanban boards, calendars, or lists – a highly flexible way to manage structured content. Obsidian doesn’t have this natively, but several community plugins aim to replicate these multi-view database features. Below is a comparison of key plugins (and plugin combinations) that let you use existing Markdown files to achieve Table, Kanban, Calendar, and List views with near real-time syncing of data across views. We evaluate each on supported views, Markdown compatibility, real-time sync, cross-platform support, cost, and ease of use/customization.

Comparison of Notion-Like Database Plugins in Obsidian
Plugin	Supported Views	Markdown-Based?	Real-Time Sync Across Views	Cross-Platform	Cost	Ease of Use & Customization
Obsidian Projects (Marcus Olsson)	Table, Kanban (Board), Calendar, Gallery1 (no separate List view)	Yes – uses existing notes’ YAML frontmatter (no proprietary format) ([GitHub - marcusolsson/obsidian-projects: Plain text project planning in Obsidian](https://github.com/marcusolsson/obsidian-projects#:~:text=,and usability issues will be))	Yes: Unified project data updates instantly in all views (drag-and-drop to update status, dates, etc.) ([Use Obsidian for Content Creators	Build Notion-like Database Views to Manage Projects	by Amy Li, PhD	Medium]([https://amyjuanli.medium.com/use-obsidian-for-content-creators-build-notion-like-database-views-ab8b48304659#:~:text=I%20don%E2%80%99t%20use%20Notion%20as,effortlessly%20inside%20the%20Calendar%20view](https://amyjuanli.medium.com/use-obsidian-for-content-creators-build-notion-like-database-views-ab8b48304659#:~:text=I don’t use Notion as,effortlessly inside the Calendar view))) ([Announcing Obsidian Projects - Marcus Olsson](https://marcusolsson.dev/announcing-obsidian-projects/#:~:text=The Board view groups your,columns based on their status))
Database Folder (RafaelGB)	Table (grid/spreadsheet view) primarily2	Yes – built on Dataview; reads/writes YAML fields in Markdown ([Database Folder](https://rafaelgb.github.io/obsidian-db-folder/#:~:text=This plugin allows you to,databases in your Obsidian Vault))	Partial: Edits in table update the note immediately ([Database Folder](https://rafaelgb.github.io/obsidian-db-folder/#:~:text=This			
MAKE.md (Make.md plugin)	List (default), Table, Kanban (Board), Calendar ([Context Views - make.md](https://www.make.md/docs/Getting Started/Lists and Databases/Context Views#:~:text=,view%2C board view%2C calendar views))	Yes – uses note metadata (properties can be added via UI, imported from YAML) ([Contexts - make.md](https://www.make.md/docs/Getting				
Kanban Plugin (obsidian-kanban)	Kanban board (only)	Yes – stores boards in a Markdown file (cards are list items) ([obsidian-kanban - Obsidian Hub - Obsidian Publish](https://publish.obsidian.md/hub/02+-+Community+Expansions/02.05+All+Community+Expansions/Plugins/obsidian-kanban#:~:text=Links%3A [GitHub repository](https%3A%2F%2Fgithub.com%2Fmgmeyers%2Fobsidian,Do not))	Partial: Board reflects file changes immediately; to view same data in other formats, you’d use the file or queries. Not integrated with calendar/table without additional tools.	Desktop & Mobile (mobile drag-and-drop supported) ([Obsidian Hub - Kanban](https://publish.obsidian.md/hub/02+-+Community+Expansions/02.05+All+Community+Expansions/Plugins/obsidian-kanban#:~:text=Plugin ID%3A obsidian,backed Kanban boards in))	Free	Very easy for Kanban boards. One note = one board. Minimal setup (new “Kanban” note via command). Customization: Allows per-board settings and card metadata (checkboxes, deadlines, etc.), but statuses are not in YAML (harder to reuse in other views) ([Use Obsidian for Content Creators
CardBoard (Roovo)	Kanban board (derives from tasks across vault)	Yes – uses regular Markdown tasks in any notes ([Plugin : CardBoard (a kanban for your markdown tasks) - Share & showcase - Obsidian Forum](https://forum.obsidian.md/t/plugin-cardboard-a-kanban-for-your-markdown-tasks/28314#:~:text=,including front matter tags))	Partial: Presents a unified board of tasks by status or tag. Updates a task’s checkbox or status on the board will update it in its source note immediately. But other views (like calendar or table) would require separate plugins.	Desktop & Mobile (supports vault-wide task scan; UI works on mobile)	Free	Easy if you already use the Tasks plugin or [ ] markdown tasks. No setup needed beyond installing – it auto-boards tasks by tag or due date. Less customizable than full databases (focused on task status/dates), but very convenient for a quick overview ([Plugin : CardBoard (a kanban for your markdown tasks) - Share & showcase - Obsidian Forum](https://forum.obsidian.md/t/plugin-cardboard-a-kanban-for-your-markdown-tasks/28314#:~:text=
Big Calendar (Boninall)	Calendar (schedule view)	Yes – reads dates from Daily notes, Tasks, Dataview, Kanban items ([Big Calendar by Boninall - Obsidian plugin analytics	Observatory]([https://system3.md/observatory/plugins/big-calendar#:~:text=Task%20%26%20Project%20Management](https://system3.md/observatory/plugins/big-calendar#:~:text=Task %26 Project Management)))	Partial: Shows all tasks/events on a calendar; checking off a task or moving an event reflects in the source. Other views (board/table) not provided by this plugin.	Desktop & Mobile (calendar UI usable on both; updated in 2025) ([Big Calendar by Boninall - Obsidian plugin analytics	Observatory](https://system3.md/observatory/plugins/big-calendar#:~:text=1))
1 Note: Obsidian Projects also offers a Gallery view (grid of note cards) (Announcing Obsidian Projects - Marcus Olsson), similar to Notion’s gallery. It does not have a dedicated “List” view (though a single-column Table can emulate a basic list of items).

2 The Database Folder plugin currently focuses on a table/spreadsheet interface. Future updates or complementary plugins would be needed for kanban or calendar layouts.

3 All listed plugins are free. MAKE.md is a free community plugin (the name refers to the product, not a paid service). Its developers do not charge for core features (as of writing), although donations or future premium addons are possible.

Plugin Overviews: Strengths and Weaknesses
Below we describe each solution in detail, highlighting how well it replicates Notion’s multi-view databases and any trade-offs in using it.

Obsidian Projects (Marcus Olsson) – Integrated Multi-View
Views Supported: Projects is the closest one-to-one analogy to Notion’s database views. It supports Table, Board (Kanban), Calendar, and Gallery views within a single plugin ([GitHub - marcusolsson/obsidian-projects: Plain text project planning in Obsidian](https://github.com/marcusolsson/obsidian-projects#:~:text=,note templates for each project)). (It doesn’t have a named “List” view, but the Table view can be used as a simple list of notes.) Each project is essentially a collection of notes (by folder or Dataview query) that you can switch between these views easily.

Markdown Compatibility: All data remains in your existing Markdown files. Projects parses note YAML frontmatter and inline fields to populate the database. It deliberately “leaves no trace” – it doesn’t add any special markers or proprietary fields to your notes ([GitHub - marcusolsson/obsidian-projects: Plain text project planning in Obsidian](https://github.com/marcusolsson/obsidian-projects#:~:text=,and usability issues will be)). For example, if you use a YAML field like Status or Date in notes, the Board view will treat Status as the column and Calendar will use Date to plot the note (Announcing Obsidian Projects - Marcus Olsson) (Announcing Obsidian Projects - Marcus Olsson). This means you can stop using the plugin anytime and your notes remain plain Markdown.

Real-Time Sync: Because all views (table, board, calendar, etc.) are tied to the same project data, any change in one view is reflected almost immediately in the others. If you drag a card to a different column in the Kanban board, it updates the note’s Status field behind the scenes; opening the table view will already show the updated status. Similarly, dropping a note onto a date in Calendar sets its date property ([Announcing Obsidian Projects - Marcus Olsson](https://marcusolsson.dev/announcing-obsidian-projects/#:~:text=The Calendar view displays notes,date property as calendar events)). This near real-time syncing makes it feel very much like Notion (where a change in one view of a database is instantly visible in other views).

Cross-Platform: Projects works on both desktop and mobile Obsidian. The interface is built to feel like a native part of Obsidian (e.g., it uses Obsidian’s component styles and context menus). There are no known limitations on mobile – you can view and edit project boards or tables on a phone or tablet just as on desktop. The developer explicitly aimed for a professional, reliable experience, which implies testing across platforms ([Announcing Obsidian Projects - Marcus Olsson](https://marcusolsson.dev/announcing-obsidian-projects/#:~:text=Does Projects replace X%3F)).

Cost: It’s completely free. It’s a community plugin (open-source). Marcus Olsson provides it openly (with an option to donate, but no payment required).

Ease of Use: Strengths: Obsidian Projects is very easy to get started with. After installing, you create a “Project” by selecting a folder (and optionally subfolders or a Dataview query) – the plugin will aggregate all notes in that source. It automatically detects frontmatter keys and makes them columns in the table view (Announcing Obsidian Projects - Marcus Olsson). You can add new notes to the project with a template, and edit fields directly in the table (just click into a cell to change a value) ([Announcing Obsidian Projects - Marcus Olsson](https://marcusolsson.dev/announcing-obsidian-projects/#:~:text=The Table view lays out,for every front matter property)). The UI for switching views is intuitive (tabs or a menu for Table/Board/Calendar/Gallery), so non-technical users can navigate it easily. It essentially gives Notion-like functionality out-of-the-box without requiring the user to write any queries or scripts.

Customization: Projects favors simplicity over exhaustive customization. You can configure which field corresponds to Status (for boards) and Date (for calendar) when you set up a view, and you can hide or reorder table columns, but it doesn’t support advanced computed fields or relational links yet. The focus is on a stable, integrated experience ([Announcing Obsidian Projects - Marcus Olsson](https://marcusolsson.dev/announcing-obsidian-projects/#:~:text=Does Projects replace X%3F)). This means power-users might find it lacking some niche features (for instance, you can’t have two different Kanban boards for the same project using two different groupings; you’re limited to one grouping field for the Board view). However, for most use cases (content planning, task management, etc.) it provides enough flexibility. The strength of Projects is its breadth – you get all core view types in one place ([Announcing Obsidian Projects - Marcus Olsson](https://marcusolsson.dev/announcing-obsidian-projects/#:~:text=The Obsidian community has created,with one of the alternatives)). The weakness is that it may not go as deep in each view’s features as dedicated plugins do (for example, it won’t have all the fantasy-calendar options of a dedicated Calendar plugin or the complex card styling of a dedicated Kanban plugin). Nonetheless, for a majority of users wanting a Notion-like database, Projects offers an excellent balance of ease and functionality, and it’s actively maintained.

Database Folder (RafaelGB) – Spreadsheet-Style Data Editing
Views Supported: Database Folder is focused on the Table view (spreadsheet-like interface). It was inspired by Notion’s table databases, providing an editable grid of rows and columns. It does not natively offer Kanban or Calendar views. Your “database” in this plugin is essentially a special Markdown note that, when opened, displays a table of records. Each row corresponds to a note (from a folder or a Dataview query), and each column is a YAML field or meta-property of those notes ([Database Folder](https://rafaelgb.github.io/obsidian-db-folder/#:~:text=This plugin allows you to,databases in your Obsidian Vault)). There is no integrated calendar or board, so to replicate those you would use other plugins or the data itself (see weaknesses below).

Markdown Compatibility: This plugin leverages the Dataview engine under the hood ([Database Folder](https://rafaelgb.github.io/obsidian-db-folder/#:~:text=Using the search engine of,need to open the note)), meaning it queries your existing notes (by folder, tag, etc.) and populates the table with data from those notes. Importantly, it allows editing those notes’ metadata from the table directly ([Database Folder](https://rafaelgb.github.io/obsidian-db-folder/#:~:text=This plugin allows you to,databases in your Obsidian Vault)). For example, if you have notes with a status: field in YAML, the Database Folder table will have a “status” column – you can click a cell to change the value, which will write that change into the note’s actual YAML. All data stays in the Markdown files as YAML frontmatter or inline text. The plugin itself might store some settings (like which folder it’s pointing to, column order, etc.) but not the content of your data – that stays in the files. This satisfies the “existing Markdown” requirement: no proprietary database files needed (Dataview does the searching of your .md files).

Real-Time Sync: Strength: Within the table view, any edit you make is immediately saved to the note, and the table will reflect it. If you have the note open elsewhere, you’d see it update. The table can also be refreshed to pick up new files or changes made outside (it often auto-refreshes when it detects note changes through Obsidian’s API). Weakness: Since Database Folder itself only provides the table UI, if you wanted a Kanban or calendar view of the same data, you’d have to use another plugin (like the Kanban plugin or a calendar plugin) alongside it. Those won’t automatically “sync” with the table in real-time except through the file system. In practice, you could open a note in Kanban plugin and also see it as a row in Database Folder (since the Kanban note contains tasks or YAML that Database Folder might list), but it’s not as seamless as Projects or Make.md where one interface controls multiple views. So, real-time updates are confined to the table view itself. If multi-view syncing is a priority, Database Folder would need to be combined with other solutions (and you’d rely on the fact that when you edit a note in the table, other plugins like Dataview or Calendar will notice the changed file shortly after).

Cross-Platform: Initially, Database Folder was desktop-only, but as of version 2.5.0 it gained mobile support ([Database Folder Plugin 2.5.0 - Mobile support! : r/ObsidianMD - Reddit](https://www.reddit.com/r/ObsidianMD/comments/xbtp3v/database_folder_plugin_250_mobile_support/#:~:text=Database Folder Plugin 2.5.0 ,to make the application compatible)). Now you can use it on Obsidian Mobile – the table interface might be a bit cramped on a phone, but basic functionality works. Some UI interactions (dragging columns, etc.) may be easier on desktop, but you can view and edit entries on mobile. The developer has been improving mobile compatibility, so it’s considered cross-platform at this point.

Cost: Free and open-source. It does require the (free) Dataview plugin to be installed as well, but that’s also community-developed.

Ease of Use: Database Folder caters to users who want an Excel-like experience in Obsidian. Its strength is that it gives you direct, in-place editing of metadata – you don’t have to open each note to change a field, you can do it in the table grid ([Database Folder](https://rafaelgb.github.io/obsidian-db-folder/#:~:text=This plugin allows you to,databases in your Obsidian Vault)). Creating a new row can also create a new note file automatically. It’s fairly straightforward to create a database: right-click a folder and choose “Create database” or use a command ([Database Folder](https://rafaelgb.github.io/obsidian-db-folder/#:~:text=There are 3 ways of,creating a database)), and a special Markdown file is made which, when opened, shows the table of that folder’s notes. For basic use (just editing existing fields, adding new notes), it’s user-friendly.

However, full power use brings complexity. You can define formulas (similar to Notion’s formulas) and relations between databases, which is powerful but requires learning the plugin’s syntax and options. This plugin essentially tries to match a lot of Notion’s database features (like computed fields, rollups, etc.). For instance, it supports text, number, date, select/multi-select, checkbox, and even relation fields (linking notes) and formula calculations (Feature comparison of Obsidian database plugins - Google Sheets) (Feature comparison of Obsidian database plugins - Google Sheets). Configuring these via the plugin’s settings can be a bit technical. So, the customization is high – you can tailor which columns to show, hide fields, sort/filter, create new property columns on the fly, etc. – but ease of use is moderate. Non-technical users might find the initial setup confusing (especially needing Dataview knowledge for advanced queries). There might be occasional quirks, since it’s essentially a layer on top of Dataview (for example, if Dataview fails to index something, the table might not show it until a vault re-index).

Strengths: Great for those who primarily want an editable table of their notes (like a master spreadsheet). Active development and a clear roadmap have added many features. It’s particularly useful if you have large datasets in Obsidian and want to edit them quickly (e.g., a bibliography vault where you want to tag many entries at once, etc.). Weaknesses: Lacks native multi-view – it’s more of a specialized tool. If you only use Database Folder, you won’t get a kanban board or calendar unless you incorporate other plugins. Also, because it’s quite powerful, some users report it can feel “heavy” performance-wise when dealing with hundreds of notes (similar to how Notion can feel slow with very large databases). But for moderate numbers of notes it works smoothly.

MAKE.md Plugin – Notion-Like Contexts and Views
Views Supported: MAKE.md (often styled “make.md”) is a comprehensive plugin that adds an entire suite of Notion-style features to Obsidian. Relevant to databases, it introduces the concept of Contexts – which are like Notion databases or collections – and you can visualize a context in multiple view layouts. It supports List (default), Table, Kanban Board, and Calendar views for any context ([Context Views - make.md](https://www.make.md/docs/Getting Started/Lists and Databases/Context Views#:~:text=,view%2C board view%2C calendar views)). This covers all the views the question asks for. (It even has some additional capabilities like a gallery-like Card view for Kanban and possibly custom cards in list view.)

One difference: in MAKE.md, you don’t switch your whole vault to a view; instead, you define a context (say, all notes in a folder or with a tag) and then you can open that context in whichever layout you prefer. You can also save multiple named views per context (similar to saving different filtered views in Notion) ([Context Views - make.md](https://www.make.md/docs/Getting Started/Lists and Databases/Context Views#:~:text=Customizing your Context View)). For example, you might have a “Project Tasks” context and create a Kanban view grouped by status, and another Calendar view for the same context showing tasks by date.

Markdown Compatibility: All of MAKE.md’s database features are built on your Markdown content, but with some caveats. The plugin provides a UI to add “properties” to notes (like fields for date, status, etc.) ([Contexts - make.md](https://www.make.md/docs/Getting Started/Lists and Databases/Contexts#:~:text=Context properties)). When you add a property through MAKE.md, it actually can attach it to all notes in that context. Under the hood, these are stored in the notes’ YAML frontmatter (in most cases). For instance, if you add a Date property and assign a date to a note, MAKE.md will write that into the note’s YAML (so that property lives with the note, not just in some external DB). The docs mention you can import existing YAML fields into a context ([Contexts - make.md](https://www.make.md/docs/Getting

One thing to note is MAKE.md also adds other features like “Spaces” (custom order file explorer) and “Maker Mode” (enhanced WYSIWYG editor), which aren’t directly about databases. Those don’t break markdown compatibility either; they just enhance the editing experience.

Real-Time Sync: MAKE.md’s contexts are dynamic. If you have a context open in two different views (say a table view and a calendar view of the same context), updates are reflected across them. For example, checking a task as done in a list view will mark it done in the Kanban view’s card instantly (since it’s the same underlying note). Drag-and-drop interactions work too – you can drag a note card to a new column in Kanban (which updates its property), and if you had the table view open, you’d see that property change immediately, just like in Notion. The Calendar view allows drag-resizing events and those changes update the date properties ([Context Views - make.md](https://www.make.md/docs/Getting Started/Lists and Databases/Context Views#:~:text=Calendar View)) ([Context Views - make.md](https://www.make.md/docs/Getting

Cross-Platform: The plugin is designed to work on desktop and mobile. In fact, the developer touts that all features are available on mobile and that they’ve improved the mobile UI for it (make.md now available as Obsidian plugin : r/ObsidianMD). You might get a slightly different interface (Maker Mode simplifies some menus on mobile), but you can still use contexts and view them on a phone. Some interactions (like drag-and-drop on a calendar) might be a bit less convenient on touch, but they should still function (for example, calendar events could be created with taps and a dialog on mobile).

Cost: MAKE.md is currently free. There is no paid license required to use the plugin. (The mention of “with only $5 a month…” in some online commentary likely refers to a hypothetical or a comparison; as of now, no subscription is needed for MAKE.md’s Obsidian plugin.) The plugin was a runner-up in Obsidian’s 2022 competition and has a dedicated team, so while they might introduce premium features in the future, the core plugin is free. All the features we discuss (contexts, views, etc.) are included out-of-the-box.

Ease of Use: MAKE.md aims to make Obsidian more approachable, especially for users coming from Notion ([make.md now available as Obsidian plugin : r/ObsidianMD](https://www.reddit.com/r/ObsidianMD/comments/zn6088/makemd_now_available_as_obsidian_plugin/#:~:text=As an Obsidian user for,the experience less janky overall)). It adds GUI controls for things that normally require YAML or Dataview. This means the learning curve is gentle for basic operations: you can create a context (e.g., “Books” for notes tagged #book), then add properties via forms (text, number, select dropdowns, etc.) and start entering data without ever seeing raw YAML. The list view of a context looks like a slimmed-down list of cards where you can inline edit fields. The table view allows typical table interactions (resize columns, hide fields, etc.) ([Context Views - make.md](https://www.make.md/docs/Getting Started/Lists and Databases/Context Views#:~:text=Table View)). The Kanban (board) view can be made by grouping cards by a select property (e.g., Status) ([Context Views - make.md](https://www.make.md/docs/Getting

For customization, MAKE.md is quite powerful. You can configure multiple saved views with filters/sorts (like “My Tasks” view vs “All Tasks” view for the same context). It supports advanced property types: Relations (linking to another context’s notes), Aggregations/Rollups, and Formulas (which are more advanced, likely requiring reading the docs to use). In other words, it’s bringing a lot of Notion’s database sophistication into Obsidian. This is a double-edged sword: strength in flexibility, weakness in complexity. If you just need a simple Kanban board, MAKE.md might feel over-engineered; but if you want something approaching a full Notion database with computed fields, it can do that.

One consideration is that MAKE.md changes some core behaviors (like the editor and file explorer enhancements). Some users love this unified solution; others might find it too intrusive if they only wanted the database aspect. But you can enable/disable features within the plugin settings.

Strengths: Very full-featured – it is arguably the most comprehensive “Notion alternative” environment inside Obsidian. Polished UI (it even has a custom / command menu for inserting elements, akin to Notion’s slash commands). Great for those who want maximum alignment with Notion’s way of structuring data, including properties and multiple views. Active development and a dedicated website/documentation indicate it’s being continuously improved.

Weaknesses: It’s a large plugin, so it might use more resources. With so many features, occasional bugs or complexity might arise. New users might need to spend time learning the concept of contexts and how to manage properties. Also, because MAKE.md tries to do a lot, it could potentially conflict with other plugins (though generally it plays nicely). If a user’s goal is narrowly “see my notes on a calendar” or “just have a Kanban of tasks,” a lighter plugin might suffice without the overhead. In summary, MAKE.md is ideal if you want an all-in-one, Notion-like system and are okay with adopting its way of organizing data in Obsidian.

Obsidian Kanban Plugin (by @mgmeyers) – Simple Kanban Boards
Views Supported: This popular plugin provides only the Kanban board view. It doesn’t do tables or calendars, but it excels at Kanban. Each Kanban board is stored as a Markdown file (with a special section that makes it render as a board). Cards on the board are just list items in that file, which can have checkboxes, dates, and even backlinks or other content. Essentially, it turns a Markdown checklist into a drag-and-drop board, complete with columns.

Markdown Compatibility: Completely markdown-based – “markdown-backed Kanban boards” ([obsidian-kanban - Obsidian Hub - Obsidian Publish](https://publish.obsidian.md/hub/02+-+Community+Expansions/02.05+All+Community+Expansions/Plugins/obsidian-kanban#:~:text=Links%3A [GitHub repository](https%3A%2F%2Fgithub.com%2Fmgmeyers%2Fobsidian,Do not)). The board is a Markdown note. Under the hood, the columns are headings in the note, and cards are list items under those. Any text you add to a card is actually written in the file. For example, a card that says “Fix bug #123 @today” would just be a list item - [ ] Fix bug #123 @today in the file (with @today perhaps being a date from the Dataview/Tasks syntax). The plugin adds some metadata in HTML comments at the top of the file (like %% kanban: ... %%) to store board settings, but these are harmless if you view the file as plain text.

This means you can edit a Kanban board even without the plugin (just as a text list), and your data stays in the vault. No separate database needed. However, the Kanban plugin doesn’t use YAML frontmatter for card properties – any extra info (like a due date or an assignee) is usually just typed into the card text or using block references to other notes. This is important: it means the Kanban plugin by itself doesn’t structure data for easy reuse. It’s great for visualizing tasks, but if you want those tasks to show up in a Dataview table or Calendar, you’d have to follow certain conventions (like use the Tasks plugin syntax within cards, or include a due:: inline field in the card text). It’s doable, but not automatic.

Real-Time Sync: Within its domain, yes – if you move a card on the board, that change is immediately reflected in the Markdown file. If that file is open elsewhere (say in a preview pane or being queried by Dataview), the updated order/status will be saved right away. The Kanban plugin also has a feature: if you assign a “Date” to a card (via a special syntax or using with the Calendar plugin), it can integrate to some degree. But by itself, it doesn’t have a calendar or table view. So “sync across views” only applies if you consider the markdown file as one “view” and the Kanban board as another – in that sense, yes, they are the same thing just displayed differently (edit in one, see it in the other). But if you want a true multi-view setup (like a table of all Kanban cards), you would need to use Dataview or another plugin to query the Kanban note. That would not be as instant as, say, Projects (you might refresh the Dataview or it auto-refreshes every few seconds). It’s a partial solution for multi-view: great Kanban front-end, requires other tools to cover other views.

Cross-Platform: The Kanban plugin is widely used on both desktop and mobile. You can create and edit boards on mobile. Drag-and-drop works via long-press on touch devices (or there are alternative move commands). Some minor tweaks (like inverted scrolling) were added to improve mobile experience ([Fix Obsidian Kanban Mobile - Curtis McHale](https://curtismchale.ca/2022/07/20/fix-obsidian-kanban-mobile/#:~:text=Fix Obsidian Kanban Mobile ,This accomplishes two things)). So it’s essentially fully functional on mobile.

Cost: Free, community-developed.

Ease of Use: This plugin’s strength is simplicity and focus. If what you want is a Kanban board in Obsidian, this is probably the first recommendation. It’s very easy to use: after enabling, you run “Create new Kanban” and it makes a board. You add columns by typing a heading (or using menu), add cards by clicking “+” or just writing - [ ] Task under a column. It supports drag-and-drop to reorder cards or move them between columns, which feels exactly like Notion’s board (even a bit snappier, since it’s local). You can also indent cards to create subtasks. It has some nice features like card colors, the ability to embed images in cards, and mark cards complete by clicking the checkbox.

Customization is somewhat limited compared to an all-in-one database: you can’t add arbitrary new data fields to a card except by writing in the text. However, you can link cards to other notes (for example, you might have a card that is actually an Obsidian note link, so clicking it opens that note – useful for managing notes on a board). Many users use the Kanban plugin in combination with the Tasks plugin or Dataview: e.g., put 🔁 every Monday in a card to signify a recurring task (recognized by Tasks plugin), or use Dataview to query all tasks from "Project X.kanban" note to get a table overview. These require extra know-how.

Strengths: Dead-simple Kanban implementation that “just works” – no need to think about YAML, properties, etc. Great for visual thinkers who like to move cards around and have that reflect in their notes. It’s also very lightweight. Weaknesses: Only covers Kanban. If you later decide you want a calendar of those same items, you don’t have an immediate solution (besides manually pulling out dates with another plugin). There’s also a limitation that the Kanban board exists in one file – you can’t easily have two boards showing the same note in different groupings (which Projects or MAKE.md contexts allow). Each card is essentially tied to that board’s structure. This is fine for many “to-do list” or project pipeline scenarios, but not as flexible as a true multi-view database. In short, use the Kanban plugin if Kanban is your primary need and you prefer simplicity; but for a full Notion-like setup, consider integrating it with other tools or using Projects/MAKE.md instead (which the Kanban plugin author himself acknowledges – the README suggests using Projects if you need multiple view ([Announcing Obsidian Projects - Marcus Olsson](https://marcusolsson.dev/announcing-obsidian-projects/#:~:text=For example%3A))】).

CardBoard (Tasks Kanban) – Kanban for Distributed Tasks
Views Supported: CardBoard is another Kanban-style plugin, but with a twist: it builds Kanban boards from your tasks across your vault, rather than from a single note. In other words, it answers the question: “I have tasks in many notes – can I get a Kanban view of all tasks by status or by tag?” The answer with CardBoard is yes. It doesn’t support table or calendar directly (though it can do date-based boards), focusing only on Kanban as well.

Markdown Compatibility: It uses regular Markdown task syntax (- [ ]) that you have in your note ([Plugin : CardBoard (a kanban for your markdown tasks) - Share & showcase - Obsidian Forum](https://forum.obsidian.md/t/plugin-cardboard-a-kanban-for-your-markdown-tasks/28314#:~:text=,including front matter tags))】. You do not need to move tasks to a special file. For example, if you have - [ ] Fix bug (status:: In Progress) in a note, CardBoard can show that as a card under the “In Progress” column (if configured). It recognizes tasks and subtasks, and supports grouping by tags or by dates out-of-the-bo ([Plugin : CardBoard (a kanban for your markdown tasks) - Share & showcase - Obsidian Forum](https://forum.obsidian.md/t/plugin-cardboard-a-kanban-for-your-markdown-tasks/28314#:~:text=

The nice thing here is that your task data remains in the original notes – CardBoard doesn’t duplicate it. If you check off a task on the board, it checks off the - [x] in the source note.

Real-Time Sync: If you’re using the Tasks plugin or Dataview to list tasks, CardBoard updates should reflect nearly immediately. CardBoard itself, when you toggle a task or move it between columns (if using tag-based columns, moving could mean adding/removing a tag on the task line), will write that change to the note. This is quite close to real-time syncing: the next time your Tasks query or calendar plugin looks at that task, it sees the updated status or tag. There might be a slight delay because it’s different plugins reacting, but essentially it’s all reading the same markdown source of truth. CardBoard was designed to give an overview without moving tasks, so it’s inherently synced by design (one source, multiple views). However, note that CardBoard by itself doesn’t provide a non-Kanban view – you rely on other means to see the tasks in list form or calendar form. It is often used alongside Tasks plugin (for queries and list views of tasks ([CardBoard - An Obsidian plugin to make working with tasks a ...](https://www.obsidianstats.com/plugins/card-board#:~:text=CardBoard ,directly from your markdown files))】.

Cross-Platform: CardBoard is compatible with mobile (especially now that it has matured). You open it as a side pane or main view, and it shows your board. Since it’s more about reading tasks, it might not have as fancy drag-and-drop (though it likely still allows moving tasks by changing their status field). The plugin’s nature (scanning entire vault) is a bit heavy, but should run on mobile fine for reasonably sized vaults.

Cost: Free.

Ease of Use: If you already manage tasks in Obsidian (using the Tasks plugin or plain markdown checkboxes with some tag system), CardBoard is very easy to adopt. Upon installing, it can automatically create boards based on tags or dates. For example, you might get a board with columns for each of your status tags (#todo, #in-progress, #done) and all tasks with those tags appear in the respective columns. Or a board by due date (overdue, this week, later, etc.). This means virtually no setup – it’s plug-and-play with existing data. You can also configure custom boards (filter by folder or tag) to narrow down, say, “Project X tasks” boar ([Plugin : CardBoard (a kanban for your markdown tasks) - Share & showcase - Obsidian Forum](https://forum.obsidian.md/t/plugin-cardboard-a-kanban-for-your-markdown-tasks/28314#:~:text=Board Filters have arrived ,tasks go on which board))】.

Customization is somewhat limited to filtering which tasks go into which board and what property defines the columns (tag or date). It’s not a full database where you add arbitrary properties. But it does support the Obsidian Tasks plugin’s syntax (due, start, recurring, priority) seamlessl ([Plugin : CardBoard (a kanban for your markdown tasks) - Page 2](https://forum.obsidian.md/t/plugin-cardboard-a-kanban-for-your-markdown-tasks/28314?page=2#:~:text=Plugin %3A CardBoard ,format out of the box))】. That’s a big plus: for instance, if you set a due date in a task, CardBoard can automatically create a date-based Kanban (like tasks in columns “Overdue”, “Today”, “Tomorrow”, etc. based on due date). In Notion terms, think of it like a board view where each column is a date bucket.

Strengths: CardBoard’s biggest strength is letting you keep your tasks where they naturally belong (within project notes, daily notes, etc.) and still get a global Kanban view. This is something Notion does inherently with its linked database views, and CardBoard replicates that feeling in Obsidian. It’s great for GTD or project management systems where context matters (the task lives in a project note, but you also want an overview of all “In Progress” tasks globally). Another strength is its integration with the Tasks plugin, which is actively maintained; together they form a robust task management setup in Obsidian.

Weaknesses: It’s only for tasks (checkbox items). If you wanted to manage arbitrary notes in a Kanban (not just tasks), the Kanban plugin or Projects would be better. CardBoard doesn’t create new data – you can’t add a new card directly in CardBoard (since every card must correspond to an actual task line in a note). So you either write tasks in notes or use the plugin’s quick add which will actually create a task in some note for you. It’s specialized, so it won’t manage properties beyond what a task has. Also, while it shows tasks in columns, it might not have the rich drag-and-drop experience for reordering (because tasks in different files have a fixed order in their original file). Moving a task from one column to another typically means changing its tag or status, which the plugin handles, but you’re not “physically” dragging it between lists in the same file. It works, but feels slightly different than a single-board system.

In summary, CardBoard is a great addition if you use Obsidian for task management and want a Kanban overview. It pairs well with other views (use Tasks plugin queries for lists, Calendar or Big Calendar for dates, etc.) to approximate a multi-view Notion database for tasks. However, for non-task use cases (like a database of notes that aren’t just tasks), CardBoard isn’t applicable.

Big Calendar (Boninall) – Calendar View for Notes/Tasks
Views Supported: Big Calendar focuses on the Calendar view. It gives you a big monthly (and weekly/daily) calendar inside Obsidian where you can see all your dated items. It’s not a general multi-view plugin – it doesn’t do tables or boards. But it can serve the calendar aspect of a Notion-like database. It’s capable of pulling in *events from Daily Notes, tasks (via Tasks plugin), Dataview queries, and even Kanban cards with dates ([Big Calendar by Boninall - Obsidian plugin analytics | Observatory](https://system3.md/observatory/plugins/big-calendar#:~:text=Task %26 Project Management))】. This means it’s versatile in what it displays on the calendar: it could be your journal entries (from daily notes), your deadlines (from tasks), etc., all plotted on one calendar.

Markdown Compatibility: Big Calendar doesn’t introduce a new format; it reads existing data formats:

Daily notes: If you have daily notes (dated file names) it can show those on the calendar (like the core Calendar plugin does).
Tasks plugin format: If you use 📅 YYYY-MM-DD due date notations or ⏳ start dates on tasks (Tasks plugin syntax), it can display those tasks on their due dat ([Big Calendar by Boninall - Obsidian plugin analytics | Observatory](https://system3.md/observatory/plugins/big-calendar#:~:text=Task %26 Project Management))9】.
Dataview: Possibly it can take any Dataview query returning dates and display them (advanced usage).
Kanban: The plugin specifically mentions Kanban integration – it can recognize dates within cards (likely if you tag a date or use the [@date] syntax in a card title, it will show an entry).
All these are just reading your markdown notes; Big Calendar itself might store its settings, but the events it shows are not stored elsewhere – they come from your content. This means no data lock-in. For example, if you schedule a task for today via Big Calendar (it provides a UI to add an event or task on a date), it will actually create a task in your vault (perhaps in a daily note or a specified calendar file). It leverages your existing workflow.

Real-Time Sync: Within Obsidian, Big Calendar listens for changes. If you check off a task that’s shown on the calendar, it’ll update (it might gray it out or strike-through, for instance). If you drag an event (if enabled) to a new date on the calendar, it will change the date in the underlying file (for example, modify the due date of that task). So in that sense, it offers bi-directional sync between the calendar view and your notes. However, Big Calendar doesn’t talk to boards or tables directly – it focuses on date syncing. So it complements other views: e.g., use Big Calendar + CardBoard + Tasks plugin together, and you have calendar and Kanban both reflecting the same tasks.

Big Calendar is updated as of 2025 (the recent versions in March 2025 improved it), so it’s quite responsive and integrated. It likely uses Obsidian’s event system to refresh as tasks change, meaning if you mark a task done in a note, the calendar will refresh that item’s status quickly.

Cross-Platform: It should work on mobile, showing a calendar view (which you can scroll through). The UI of a full calendar on mobile is a bit cramped, but it’s similar to using a calendar app. You might tap on a date to see items or long-press to add. Given it had updates in 2025, mobile support is presumably solid. (The older “Full Calendar” plugin had some issues, but Big Calendar being maintained suggests mobile was considered. The plugin listing even warns if a plugin isn’t mobile-compatible – Big Calendar does not have such a warning.)

Cost: Free.

Ease of Use: If your goal is “I want to see my notes/tasks on a calendar”, Big Calendar is one of the best solutions. Strengths: It’s quite straightforward – after installation, by default it will show your daily notes on the calendar. With minimal config, it can also display tasks that have due dates (it likely automatically picks up Tasks plugin data if presen ([Big Calendar by Boninall - Obsidian plugin analytics | Observatory](https://system3.md/observatory/plugins/big-calendar#:~:text=Task %26 Project Management))9】. So you might immediately see all tasks due today, tomorrow, etc., on the calendar. You can click on a date to create a new daily note or new event. There’s also support for “event notes” – you could designate a folder for notes that represent calendar events (like meeting notes with a date: in YAML), and it will show those. In essence, it’s flexible in consuming data but tries to work out-of-the-box.

Customization includes the ability to filter what to show (maybe only certain tag events), color-coding different sources, and switching between month/week/day layouts. It uses FullCalendar (an established JS library), so it has a lot of calendar features – e.g., drag to create a time block, or resize an event duration if events have start/end.

Weaknesses: It’s specialized to calendar use-cases. If you don’t already assign dates to your notes or tasks, you need to start doing so for it to be useful. It doesn’t help you manage other properties of your data (no concept of status, etc., beyond maybe marking tasks done which is binary). For some, the core Calendar plugin (which just handles daily notes) plus a few Dataview queries might suffice, but Big Calendar shines when you have many dated items across the vault. One potential weakness is that it’s a lot of visual information in one plugin – if you have thousands of tasks, the calendar could become cluttered. But you can filter by types or disable some integrations if needed.

Use in a multi-view system: Big Calendar can be thought of as the Calendar component of a Notion-like setup. For instance, if you use Projects or MAKE.md, you might not need Big Calendar since those have their own calendar view. But if you are assembling your own system (say, Dataview for table, Kanban plugin for board, etc.), Big Calendar fills the calendar gap nicely. It plays well with others because it’s just reading the data – e.g., it will show tasks created by Kanban or Project plugins as long as they use recognizable date formats.

Conclusion: All these plugins (and combinations thereof) bring Obsidian much closer to Notion’s database versatility, while respecting that Obsidian works with plain text Markdown. For an all-in-one solution, Obsidian Projects and MAKE.md are top choices – they each support all the major views and keep everything in Markdown. Projects is lightweight and Obsidian-esque, ideal if you want multiple views with minimal fu ([Announcing Obsidian Projects - Marcus Olsson](https://marcusolsson.dev/announcing-obsidian-projects/#:~:text=The Obsidian community has created,with one of the alternatives))8】. MAKE.md is more heavyweight but offers more Notion-like advanced features and a polished experience for those willing to delve into it.

If you prefer a mix-and-match approach, you can use Database Folder for powerful table editing, Kanban/CardBoard for tasks and boards, and Big Calendar for scheduling, all on top of the same set of notes. This modular approach might require a bit more setup and does not sync as instantaneously across separate plugins (e.g., you may need to rely on common conventions like the Tasks plugin syntax to tie them together). However, the advantage is you can pick just what you need. For example, a user could use CardBoard + Big Calendar purely for task management (kanban and calendar of tasks, no table needed), or Database Folder + Kanban plugin to manage project notes (table for properties and a manual Kanban board per project note).

In choosing a solution, consider maintenance and community support as well: all the ones discussed are actively maintained as of 2025, with large user bases and support on the Obsidian forum/Discord. They are free to try, so one can experiment to find the right balance of Notion-like functionality within Obsidian’s environment. By leveraging these plugins, Obsidian users can enjoy the best of both worlds: Notion’s multi-view data organization and Obsidian’s markdown-first, offline-first workflow.