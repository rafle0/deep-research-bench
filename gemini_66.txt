Replicating Notion's Multi-View Databases in Obsidian: A Comparative Analysis of Plugins
1. Introduction
Obsidian, a powerful local-first knowledge management application, leverages Markdown files, offering flexibility and user control. However, users migrating from platforms like Notion often seek to replicate its robust multi-view database functionality – specifically Table, Kanban, Calendar, and List views – within Obsidian's ecosystem. Notion's databases provide structured data organization with dynamic, interconnected views, a feature not native to Obsidian's file-based structure. This report analyzes various Obsidian community plugins designed to bridge this gap, evaluating their effectiveness in mimicking Notion's database capabilities. It examines how these plugins structure data, implement different views, handle querying, and compares their strengths, weaknesses, performance considerations, and mobile compatibility, targeting users seeking sophisticated data organization within their Obsidian vaults.

2. Understanding "Databases" in Obsidian
A fundamental distinction exists between Notion's databases and how database-like functionality is achieved in Obsidian. Notion utilizes dedicated database objects where data is stored in structured fields, separate from standard page content.1 Obsidian, conversely, is built upon individual Markdown files residing in a local folder.2 Replicating database features in Obsidian involves adding structured metadata within these Markdown files and using plugins to query and visualize this metadata.1

Structuring Data within Markdown: Plugins typically rely on standardized ways to embed metadata within notes:
YAML Frontmatter: Metadata enclosed by --- at the top of a note, using standard YAML syntax (key: value).5 This is a common method for defining core properties of a note.
Inline Fields: A Dataview-specific syntax (Key:: Value) allowing metadata to be placed anywhere within the note's content.5 This offers more contextual data placement.
Tags: Standard Markdown tags (#tagname or #nested/tag) are often used for categorization and filtering, forming the basis for simple queries.5
Tasks: Specific task formats, like - [ ] Task description [metadata:: value], are recognized by plugins such as Tasks. This allows structured data (like due dates, priorities, status) to be associated directly with checklist items and subsequently queried.7
The Role of Querying Engines (Dataview): The Dataview plugin is the cornerstone of most database-like operations in Obsidian.4 It acts as a high-performance indexer and query engine that reads the metadata embedded in Markdown notes. Many other plugins offering database views (like DB Folder or Projects) rely heavily on Dataview's capabilities to find, filter, sort, and aggregate data from across the vault.6
The reliance on specific metadata formats necessitates a shift in how users approach note-taking if they wish to leverage these database functionalities. It requires consistent structuring of information within notes, moving away from purely freeform writing towards a more deliberate organization of data points.4 For example, plugins like Dataview, DB Folder, and Projects explicitly depend on finding data in frontmatter, specific inline field formats, or associated tags to function correctly.5 Even user-friendly interfaces like DB Folder, which simplify query creation, still require users to understand basic filtering concepts based on folders or tags.18 This adaptation represents a practical compromise between Obsidian's inherent flexibility and the structured requirements of database management, often referred to as adopting the "Obsidian way" for database needs.4

3. Candidate Plugin Deep Dive
Several community plugins attempt to replicate Notion's multi-view database features. Below is a detailed analysis of the most prominent candidates.

3.1 Dataview
Core Functionality: Dataview is fundamentally a query engine and data index, not a database creation tool itself.5 It reads and displays data already present in notes.
Data Sources: It primarily extracts data from YAML frontmatter and inline fields (Key:: Value). It implicitly uses Tags and File Paths/Folders for filtering via FROM clauses (e.g., FROM #game or FROM "projects/active").5
Query Languages: Dataview offers two main query methods:
DQL (Dataview Query Language): A SQL-like syntax for defining data sources, filtering, sorting, and grouping.5
DataviewJS: A JavaScript API allowing for complex queries, custom data manipulation, and sophisticated rendering logic.5 Both languages have a learning curve, particularly DataviewJS.4
Views Supported: Dataview natively supports rendering data as Table and List views.5 It can also display tasks in a checklist format when queried appropriately.10
Table Features: Allows sorting, filtering, grouping, and basic aggregation functions (like count, sum, avg).5 Crucially, these tables are read-only by default; modifications must be made in the source Markdown notes.5
List Features: Provides a flexible way to display selected data points from notes based on query results.5
Strengths: Extremely powerful and flexible querying capabilities.5 Serves as a foundational layer for many other database-related plugins.18 High performance for reading and displaying data.5 Enables complex data aggregation and custom visualizations via DataviewJS.5
Weaknesses: Views are read-only, lacking direct interaction or editing.5 Possesses a significant learning curve, especially for DataviewJS.4 While indexing is generally fast, complex queries or very large vaults might impact initial load times.22 DataviewJS queries, while powerful, require caution as they have broader system access than sandboxed DQL queries and could potentially modify files or make network calls if not written carefully.5
Mobile Compatibility: Generally functions well on mobile platforms (iOS/iPadOS, Android) as its core operations involve text processing compatible with the Obsidian mobile app.23
3.2 DB Folder
Core Functionality: DB Folder aims to provide an interactive, Notion-like database experience within Obsidian, built directly on top of the Dataview plugin.6
Data Sources: It can source notes for its databases based on Folders, internal Links, Tags, or by using a Dataview query to define the source.6 It leverages Dataview's underlying engine for searching and filtering.6
Views Supported: Its primary focus and strength is the Table view.6 The documentation and user discussions do not indicate native support for other views like Kanban, Calendar, or Gallery.6
Table Features: The key feature is editable cells directly within the table view. Changes made in the DB Folder interface are saved back to the frontmatter or inline fields of the source Markdown notes.6 It also supports sorting, filtering, column customization (hiding, reordering, setting data types), and pagination, leveraging the capabilities of the underlying react-table library.6
Relational Features: DB Folder implements Relations, allowing tables to link to records in other DB Folder tables (or even within the same table). It also supports Rollups, which enable aggregation of data from these related records (e.g., counting related items, summing values, displaying original linked values).4 These features are crucial for replicating more advanced Notion database structures.
Strengths: Delivers editable, Notion-style tables within the Obsidian environment.6 Simplifies the process of creating interactive tables compared to writing complex Dataview queries manually.18 Supports essential relational database features (Relations and Rollups).4 Integrates well with Dataview, allowing users to harness its power for defining data sources.18
Weaknesses: Primarily limited to the Table view, lacking built-in Kanban, Calendar, or Gallery options.6 Some users have reported performance issues or a "janky" user experience.17 Setup can still be complex, requiring Dataview installation and understanding of data sources and column configurations.4 Documentation has been cited as potentially lacking.4 Real-time updates to the table might occasionally require a manual refresh or filter toggle.4
Mobile Compatibility: Expected to function on mobile devices, as it relies on Dataview and standard Obsidian functionalities. However, complex table interfaces can be inherently challenging to use on smaller screens.28 No major blocking issues were reported in the reviewed materials, but standard Obsidian mobile app requirements apply 3, and sync needs to be configured (e.g., Obsidian Sync, iCloud, Syncthing).2
3.3 Projects
Core Functionality: The Projects plugin is designed for project planning and management within Obsidian, offering multiple ways to visualize collections of notes sourced from folders or Dataview queries.4
Data Sources: It uses Folders or Dataview queries to define the scope of a project and gather relevant notes.20
Views Supported: Its main advantage is offering multiple built-in views: Table, Board (Kanban-style), Calendar, and Gallery.4
Table Features: Displays note properties in a tabular format. Likely supports sorting and filtering, common requirements for project management views. Editing capabilities are probable, focusing on updating project-related metadata within the notes.
Board Features: Provides a Kanban-style board for visualizing task or project progression through different stages.4 Expected to support drag-and-drop functionality.
Calendar Features: Allows notes to be visualized on a calendar based on date properties defined in the notes.20
Gallery Features: Offers a card-based visual layout for project items.20
Strengths: Provides multiple common database views (Table, Board, Calendar, Gallery) within a single plugin, making it a strong contender for integrated project management.17 Well-suited for project-centric workflows.4 Leverages Dataview for flexible data sourcing.20 Adheres to Obsidian's plain text philosophy by aiming not to add plugin-specific configurations directly into notes ("leave no trace").20 Considered visually polished by some users.32
Weaknesses: Can sometimes feel like a "self-contained silo," potentially less integrated with the standard Obsidian file browsing experience compared to folder-based approaches.17 A significant drawback reported by users is that it does not work correctly on iPad, severely limiting its usefulness for mobile or cross-platform users.17 It might lack the advanced relational database features (complex relations, rollups) found in Notion or offered by DB Folder.20
Mobile Compatibility: Major limitation – reported as not working on iPad.17 This is a critical factor for users requiring functionality across desktop and mobile Apple devices.
3.4 Make.md
Core Functionality: Make.md is an ambitious plugin aiming to provide a suite of Notion-like features within Obsidian, focusing on organization ('Spaces') and structured data ('Contexts').4
Data Sources: Utilizes note properties (frontmatter and potentially inline fields) within its 'Contexts' database system.4
Views Supported: The 'Contexts' feature supports multiple views for its databases, including Table, List, Calendar, Board (Kanban), and Gallery views.34 User reports mention seeing calendars, dashboards, and dynamic tables.36
Features:
Contexts: Provides database functionality with multiple views, filtering, sorting, and grouping capabilities.12
Spaces: Offers an organizational layer for grouping related notes and projects, potentially using dedicated folders.4
Relational Data: Supports two-way relationships (relations) between notes/database entries, formulas for calculated fields, and rollups for aggregating data from related entries.34
Inline Editing ('Flow'): Facilitates editing directly within notes.12
Quick Open ('Blink'): Provides a fast way to open notes or other items.12
Strengths: Aims for comprehensive Notion feature parity within the Obsidian environment.4 Offers a wide range of views and advanced database features like relations, rollups, and formulas in one package.34 Potentially offers a more user-friendly interface for complex setups compared to pure Dataview.4 'Spaces' provide a structured organizational paradigm.4
Weaknesses: Its broad scope can be perceived as trying to do too much, potentially conflicting with Obsidian's core minimalist philosophy or leading to complexity.4 Some users have expressed concerns about it altering the vault structure ('Spaces' using folders) or being difficult to uninstall without leaving traces.4 Historically, it may have faced stability or bug issues, although recent releases seem more polished.36 Users seeking modularity might prefer more focused, single-purpose plugins.32
Mobile Compatibility: Expected to be compatible with Obsidian mobile on iOS/iPadOS and Android, as community plugins are generally supported.3 Complex UIs can sometimes exhibit quirks on mobile platforms 38, but no specific blocking issues for Make.md were highlighted in the reviewed snippets. Thorough testing on target mobile devices is advisable.
3.5 DataLoom
Core Functionality: DataLoom is another plugin specifically designed to create Notion-like tables within Obsidian, offering a distinct approach from Dataview-based solutions.25 It stores its table data primarily in separate JSON files with a .loom extension, alongside the associated Markdown notes.28
Data Sources: Manages data largely within its own .loom file structure (JSON format), though it likely links to or associates with Markdown notes.28 This differs from plugins that read metadata directly from Markdown files.
Views Supported: The primary and explicitly mentioned view is the Table view.39 Snippets do not indicate support for Kanban, Calendar, or List views.39
Table Features: Supports various cell types (text, number, checkbox, etc.).39 Offers filtering, searching, and editing capabilities like inserting/deleting rows and columns.39 Allows exporting table data to CSV and Markdown formats.39 Sorting and column reordering are also likely features.41
Strengths: Provides a user-friendly interface for creating and managing tables, often praised for its smooth and visually appealing presentation.28 Tables created with DataLoom tend to load faster than complex Markdown tables or potentially some Dataview renderings.28 Offers a clear alternative for users who find Dataview or DB Folder setup too complex.
Weaknesses: Storing table data primarily in .loom (JSON) files deviates from Obsidian's core plain-text, Markdown-centric philosophy, which might be a concern for data portability and longevity purists.28 It appears limited to the Table view only.39 The developer has noted limitations imposed by the Obsidian API, particularly concerning deep integration with Obsidian's search functionality.28 Most significantly, numerous users have reported major mobile usability issues, including tables appearing blank on recent iOS versions and difficulty with editing on mobile devices.28
Mobile Compatibility: While intended to work on mobile, DataLoom currently faces significant challenges. Users have reported tables rendering as blank pages on iOS 18, and general difficulty using the interface for editing on mobile.28 This makes it an unreliable choice for users needing robust cross-platform table functionality at this time.
3.6 Supporting View Plugins (Brief Mention)
Achieving the full spectrum of Notion's views often requires combining a core data management plugin with specialized view plugins:

Kanban (mgmeyers): A popular, dedicated Kanban plugin that creates boards backed by Markdown files.8 Features include drag-and-drop functionality, the ability to link notes to cards, and integration with the Tasks plugin (displaying task metadata in card footers, syncing checkbox completion for recurring tasks).9 It is customizable via CSS.46
Strengths: Markdown-native approach, focused and robust Kanban tool, good Tasks integration.
Weaknesses: Metadata defining card position is stored in the Kanban file itself, not within the individual note files.17 Some mobile UI quirks have been reported, with users recommending the "prepend" setting for adding new cards on mobile for better usability.47
Mobile Compatibility: Yes, with the noted UI recommendation.47
CardBoard: An alternative Kanban plugin specifically designed to visualize Markdown tasks from across the vault.8 Columns can be defined based on dates or tags. It syncs task completion status back to the Markdown files and offers various customization options like tag styling and card highlights.8
Mobile Compatibility: Basic functionality works on mobile, but the UI is not optimized for small screens, and features like drag-and-drop may not function correctly.49
Calendar (Liam Cain): A simple, widely used calendar widget primarily designed for navigating daily and weekly notes.50 It integrates with the Periodic Notes plugin for handling weekly/monthly/etc. notes. It provides visual cues (dots) representing word count or task completion in daily notes.52
Strengths: Simple, stable, excellent integration with Obsidian's daily notes workflow.
Weaknesses: Offers basic calendar features; not designed for scheduling arbitrary events or displaying database items like Notion's calendar view.52
Mobile Compatibility: Yes, works reliably on mobile.3
Full Calendar (Community Fork): This plugin, based on the FullCalendar.js library, aimed to provide a more feature-rich calendar view, displaying notes as events based on frontmatter and supporting ICS/CalDAV integration.51
Weaknesses: It is no longer actively maintained, making it a risky choice due to potential bugs and lack of updates.31
Tasks Plugin: While not a view plugin itself, Tasks is a powerful engine for managing tasks defined in a specific format across the vault.4 Its structured task data (with due dates, recurrence, etc.) can be queried and displayed by other plugins. It integrates directly with the Kanban plugin 9 and can be visualized in calendar formats using DataviewJS or dedicated wrapper plugins like Tasks Calendar Wrapper or Big Calendar.51
The need to combine plugins highlights a key difference from Notion's integrated system. While offering modularity and allowing users to pick best-of-breed tools for specific views, this approach increases setup complexity and requires ensuring compatibility and consistent data handling between the chosen plugins. For instance, a user might opt for DB Folder's editable tables but use the dedicated Kanban plugin for boards, relying on shared metadata within the notes to link the two views indirectly.

Furthermore, the inconsistency in mobile compatibility across these more complex plugins presents a significant hurdle. While core Obsidian and simpler plugins generally work well on mobile 3, replicating sophisticated, interactive database views reliably across both desktop and mobile remains a challenge within the current Obsidian plugin ecosystem.17 Users must carefully verify mobile support for any plugin critical to their cross-platform workflow.57

4. Comparative Analysis: Replicating Notion Views
How well do these Obsidian plugins replicate each specific Notion database view?

4.1 Table View
Notion Benchmark: Highly interactive and customizable tables with diverse column types (including formulas, relations, rollups), intuitive sorting and filtering, and direct inline editing.
Dataview: Generates powerful, read-only tables based on code queries (DQL/JS).5 Excellent for displaying filtered and sorted data but lacks direct interaction.
DB Folder: Offers the closest experience to Notion's editable tables within Obsidian, including support for relations and rollups.6 The UI aims for a Notion feel 19, though some users report occasional performance issues.17
Projects: Includes a table view tailored for project management data.20 Editing is likely focused on project metadata. Less flexible for general-purpose databases than DB Folder and hampered by mobile incompatibility.17
Make.md: Provides table views within its 'Contexts' database system, supporting relations, rollups, and formulas, aiming for Notion parity.34 Represents a comprehensive, integrated option.
DataLoom: Focuses on user-friendly table creation with specific cell types.39 Offers fast loading 28 but uses a partly non-Markdown format and suffers from significant mobile compatibility problems.28
Verdict: For editable tables with relational capabilities, DB Folder and Make.md are the strongest contenders. DataLoom is user-friendly but has critical drawbacks (mobile, format). Dataview is essential for querying but not editing. Projects offers tables within its specific context but has mobile limitations.
4.2 Kanban View
Notion Benchmark: An integrated board view derived from a database, allowing grouping by properties with drag-and-drop card movement.
Projects: Features a built-in Board view, well-integrated if using the plugin for overall project management.20 Subject to the plugin's mobile limitations.17
Kanban (mgmeyers): A dedicated, popular, and robust Kanban plugin using Markdown files as the backend.8 Offers drag-and-drop and good integration with the Tasks plugin.9 A solid default choice for Kanban. Mobile usage is viable with recommended UI settings.47
CardBoard: An alternative focused on visualizing Markdown tasks on a Kanban board.8 Offers visual display of task details.11 Mobile support exists but is not fully optimized.49
Make.md: Includes a Board view as part of its integrated 'Contexts' database system.34
Task List Kanban: Specifically organizes existing tasks (- [ ] format) from files into a Kanban view, using tags to define columns.8
Verdict: The Kanban plugin (mgmeyers) is a strong choice for a dedicated, Markdown-native Kanban board, especially when combined with the Tasks plugin. Projects and Make.md provide integrated boards within their larger systems (verify mobile compatibility for Projects). CardBoard and Task List Kanban are viable task-focused alternatives.
4.3 Calendar View
Notion Benchmark: An integrated calendar displaying database items based on date properties, allowing event creation and editing directly on the calendar.
Projects: Offers a built-in Calendar view for visualizing project-related notes or tasks by date.20 Subject to mobile limitations.17
Calendar (Liam Cain): A simple, reliable widget for navigating daily/weekly notes, not for displaying arbitrary database items as events.51 Mobile-friendly.
Full Calendar (Community): Was the closest equivalent, designed to display notes as calendar events.51 However, it is unmaintained and thus not recommended.31
Make.md: Includes a Calendar view integrated within its 'Contexts' database system.34
Big Calendar: Appears capable of displaying events sourced from daily notes or tasks defined in specific formats (Tasks/Dataview/Kanban).43 A potential option for task visualization.
Custom Solutions (DataviewJS): Power users often resort to custom DataviewJS scripts, sometimes using libraries or wrappers like obsidian-tasks-calendar 55, to query notes or tasks with dates and render them in a calendar format.51 This requires technical expertise.
Verdict: Projects and Make.md offer integrated calendar views (check Projects' mobile compatibility). Big Calendar shows promise for task/daily note visualization. For simple daily note navigation, Calendar (Liam Cain) is the standard. Replicating a fully interactive Notion-style event calendar currently lacks a well-maintained, dedicated plugin; custom DataviewJS solutions are common for advanced users.
4.4 List View
Notion Benchmark: A customizable list format displaying selected properties from database items.
Dataview: Excels at creating highly customized, dynamic lists based on complex queries.5 Offers extensive formatting flexibility via DQL or JavaScript, though the lists are read-only.
Projects: Likely provides list-like representations within its views, focusing on project tasks or items. Subject to mobile limitations.17
Make.md: Includes a List view as part of its 'Contexts' database feature set 34, integrated with its system.
DB Folder / DataLoom: These plugins are primarily table-centric; a dedicated list view is not their core offering.6
Verdict: Dataview is the most powerful and versatile tool for generating custom list views in Obsidian. Make.md offers an integrated list view. For most use cases requiring dynamic lists derived from note metadata, Dataview is often the most suitable and commonly used approach.
5. Key Differentiators & Considerations
Choosing the right plugin(s) involves weighing several factors beyond just view replication:

Ease of Use vs. Power: There's a spectrum from potentially simpler setups like DataLoom (though with current issues) 28 or the UI-focused DB Folder 18, to the highly powerful but more demanding Dataview 4 or the comprehensive but potentially complex Make.md.4 Projects offers power within its project management niche.20 Users must assess their technical comfort level.
Data Structure & Editing: A critical difference lies between plugins offering read-only views generated from Markdown metadata (Dataview) 5 and those providing interactive views with inline editing capabilities that write back to the notes (DB Folder, Projects, Make.md).6 DataLoom's approach of using .loom JSON files presents a trade-off between potential performance/features and adherence to the plain-text Markdown standard.28
Multi-View Integration: Users can opt for single plugins attempting to provide multiple views (Projects, Make.md) 20 or combine several specialized plugins (e.g., DB Folder for tables + Kanban plugin for boards + a Calendar solution). The integrated approach offers potential simplicity if the plugin meets all needs, while the modular approach allows choosing the best tool for each view but increases complexity in setup and ensuring data consistency across views.
Performance and Scalability: Obsidian's performance with very large vaults (tens of thousands of notes, gigabytes of attachments) is generally good, especially with SSDs, but complex plugins or queries can introduce slowdowns, particularly on initial load or indexing.22 Dataview queries on large datasets can take time to render initially.22 Plugins like DB Folder have also faced user criticism regarding performance.25 Heavy plugin usage, in general, can impact performance, especially on mobile.61 Users with large vaults should test plugin performance, and strategies like vault splitting might be considered if performance degrades significantly.62
Mobile Compatibility: This remains a significant variable. While Obsidian itself has robust mobile apps 29, community plugin compatibility, especially for complex UIs, is inconsistent.57 Projects is reported unusable on iPad 17, DataLoom has severe issues on iOS 28, and even dedicated plugins like Kanban have mobile quirks.47 Users requiring seamless cross-platform functionality must prioritize plugins with proven mobile stability.
Obsidian Philosophy Adherence: Plugins vary in how closely they align with Obsidian's local-first, plain-text Markdown principles.4 Dataview and the mgmeyers Kanban plugin are closely aligned, reading from/writing standard Markdown. DB Folder and Projects also work primarily with Markdown metadata.6 Make.md, with its 'Spaces' and comprehensive features, might feel like a layer atop Obsidian 4, while DataLoom's use of JSON files is a clearer departure.28 This philosophical alignment can influence user choice, reflecting a preference for either leveraging Obsidian's core strengths or prioritizing the replication of features from other platforms like Notion.4
6. Summary Table: Obsidian Database Plugin Features
Plugin Name	Primary Function	Views Supported (Table, Kanban, Calendar, List, Gallery)	Data Sources	Inline Editing	Relational Features	Key Strength	Key Weakness	Mobile Compatibility
Dataview	Query Engine	Table, List, Task	Frontmatter, Inline Fields, Tags, Folders	Read-Only	No	Query Power & Flexibility	Read-Only Views, Learning Curve	Yes
DB Folder	Editable Tables	Table	Folders, Tags, Links, Dataview Query	Yes	Yes	Editable Tables, Relations/Rollups	Table-Only, Potential Perf. Issues	Yes (UI limits)
Projects	Project Manager w/ Views	Table, Kanban, Calendar, Gallery	Folders, Dataview Query	Likely (Proj.)	Limited	Multi-View Integration (Desktop)	iPad Incompatible, Siloed Feel	No (iPad)
Make.md	Notion-like Suite	Table, Kanban, Calendar, List, Gallery	Properties (Frontmatter/Inline)	Yes	Yes	Comprehensive Notion Parity	Complexity, Potential Vault Alteration	Yes (Testing Advised)
DataLoom	Notion-like Tables	Table	JSON/.loom Files	Yes	No	User-Friendly Tables, Fast Load	Major Mobile Issues, JSON Format	Issues Reported
Kanban (mgmeyers)	Kanban Board	Kanban	Markdown File Structure	N/A (Card Move)	No	Markdown Native, Tasks Integration	Metadata in Kanban File, Mobile UI Quirk	Yes (with caveats)
Calendar (Cain)	Daily Note Calendar	Calendar (Navigation)	Daily/Periodic Notes	N/A	No	Simplicity, Daily Note Nav	Basic Features, Not Event Calendar	Yes
7. Conclusion & Recommendations
Replicating Notion's multi-view database functionality within Obsidian is achievable, but it requires leveraging community plugins and understanding the inherent differences between the platforms. No single plugin perfectly mirrors Notion across all aspects while maintaining flawless mobile compatibility and strict adherence to Obsidian's plain-text philosophy. The optimal solution depends heavily on the user's specific needs and priorities.

Summary of Findings:

Core Engine: Dataview is the essential querying engine underpinning most database functionalities.
Editable Tables: DB Folder and Make.md provide the most Notion-like editable table experience, including relational features. DataLoom offers user-friendliness but faces significant mobile and data format challenges.
Multiple Views: Projects and Make.md offer integrated Table, Kanban, Calendar, and Gallery views, but Projects suffers from critical mobile incompatibility.
Specialized Views: Dedicated plugins like Kanban (mgmeyers) and Calendar (Liam Cain) offer robust, focused functionality for specific views, often integrating well with tasks or daily notes.
Mobile: Compatibility is a major concern for complex plugins like Projects and DataLoom. Simpler or more established plugins like Dataview, DB Folder, Kanban (mgmeyers), and Calendar (Liam Cain) tend to fare better, though UI limitations on small screens can still exist.
Nuanced Recommendations:

For the Closest Notion Table Experience (with Relations/Rollups):
Choose DB Folder if the primary need is powerful, editable tables with relations/rollups, and other views can be handled by separate plugins.4
Consider Make.md if seeking tables with relations/rollups as part of a broader, integrated multi-view system, accepting its potential complexity.34
For the Best Integrated Multi-View System (Table, Board, Calendar, Gallery):
Make.md appears to be the most promising option for a single plugin providing multiple views with advanced features and expected mobile compatibility.34
Projects offers these views but is not recommended if iPad/mobile compatibility is required.17
For Power Users Focused on Querying & Custom List/Table Displays:
Stick with Dataview as the core tool.5 Use DQL for standard queries and DataviewJS for complex logic or custom rendering (e.g., generating calendar-like views from task data).14 This offers maximum flexibility for those comfortable with code.
For Simplicity & Focused Views (Modular Approach):
Combine Dataview (for lists/read-only tables) with Kanban (mgmeyers) for boards 8 and Calendar (Liam Cain) for daily note navigation.51 Use the Tasks plugin for standardized task management across these views. This approach is modular and uses well-regarded, stable plugins but requires managing integrations.
Regarding DataLoom:
Due to current, widely reported mobile compatibility issues 28 and its use of a non-Markdown format 28, DataLoom is difficult to recommend for users needing reliable cross-platform access, despite its user-friendly desktop interface.
Final Considerations:

Users should carefully evaluate their tolerance for setup complexity, the necessity of mobile access, the importance of adhering to plain-text principles versus feature richness, and which specific views (Table, Kanban, Calendar, List) are most critical to their workflow. Starting with simpler solutions like Dataview and dedicated view plugins (Kanban, Calendar) before exploring more complex, integrated systems like DB Folder or Make.md is often a prudent approach. Testing plugins within one's own vault, considering its size and complexity, is essential before full adoption. The Obsidian plugin ecosystem is dynamic, and continued development may improve features and address current limitations over time.